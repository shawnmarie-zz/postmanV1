#!env node

var Newman = require('newman'),
  FS = require('q-io/fs'),
  fsNode = require('fs'),
  JSON5 = require('json5'),
  _ = require('lodash'),
  util = require('util'),
  program = require('commander');

program
  .version('0.0.1')
  .option('-i --instanceUrl <instanceUrl>', 'Set the V1 instance URL to use', 'https://www14.v1host.com/v1sdktesting')
  .option('-u --user <user:password>', 'Set the V1 instance user credentials', 'admin:admin')
  .option('-a --assetPattern <assetPattern>',  'Set the RegExp pattern to use for extracting the V1 asset OID from the Postman test title', '[A-Z,a-z]+:[0-9]+')
  .option('-c --configFileName <configFileName>', 'Set the filename to store the mappings of Postman test IDs to V1 asset OIDs', 'postmanTestsToV1AssetMap.json')
  .parse(process.argv);

var instanceUrl = program.instanceUrl;
var user = program.user;
var assetPattern = program.assetPattern;
var configFileName = program.configFileName;

// ex: https://www14.v1host.com/v1sdktesting
if (instanceUrl[instanceUrl.length] !== '/') instanceUrl += '/';
var baseApiUrl = instanceUrl + 'rest-1.v1/Data/';
// ex: baseApiUrl = 'https://www14.v1host.com/v1sdktesting/rest-1.v1/Data/',    
var baseHostUrl = instanceUrl.substr(0, instanceUrl.lastIndexOf('/'));
// ex: baseHostUrl = 'https://www14.v1host.com',

console.log('Using V1 instance at: ' + instanceUrl);

var v1hal = require('./lib/v1hal')(baseHostUrl, user);

// read the collectionjson file
var collectionJson = JSON5.parse(fsNode.readFileSync('HACK.json', 'utf8'));

// define Newman options
newmanOptions = {
  iterationCount: 1, // define the number of times the runner should run
  outputFile: "outfile.json", // the file to export to
  responseHandler: "TestResponseHandler", // the response handler to use
  asLibrary: true, // this makes sure the exit code is returned as an argument to the callback function
  stopOnError: true
}


function getAssetOid(str) {
  var matches = str.match(assetPattern);
  if (matches && 0 < matches.length) return matches[0];
  return '';      
}

FS.isFile(configFileName)
  .then(function(exists) {
    if (!exists) return FS.write(configFileName, '{}');
    return true;
  })
  .then(function() {
    return FS.read(configFileName);
  })
  .then(function(json) {
    json = json || '{}';
    postmanTestsToV1AssetMap = JSON.parse(json);

    Newman.addEventListener("iterationRunnerResultsAvailable", function(response) {
      var map = {};
      _.forEach(response.results, function(item) {
<<<<<<< Updated upstream
        var name = getAssetOid(item.name);
        map[item.id] = name;
=======
        map[item.id] = item.name,
        map[item.totalPassFailCounts.fail] = item.testStatus;
>>>>>>> Stashed changes
      });

      _.forEach(map, function(storyNumber, postmanTestId) {
        if (_.has(postmanTestsToV1AssetMap, postmanTestId)) {
          var assetId = postmanTestsToV1AssetMap[postmanTestId];
          assetId = assetId.replace(':', '/');
          v1hal.post(baseApiUrl + assetId, {
            _links: {
              Status: {
                idref: 'TestStatus:129'
              }
            },
            Name: storyNumber
          })
            .then(function(res) {
              console.log("Successfully updated existing V1 Test asset:");
              console.log(res.data);
            })
            .catch(function(err) {
              console.error("Error in updating V1 Test asset after Postman test run:");
              console.error(err);
            });
        } else {
          // TODO storyNumber should use regex patter match, not assume name === storyNumber
          v1hal.post(baseApiUrl + "Test", {
            _links: {
              Parent: { idref: storyNumber },
              Status: { idref: 'TestStatus:129' }
            },
            Name: storyNumber
          })
            .then(function(res) {
              var id = res.data._links.self.id;
              var momentLessId = id.substr(0, id.lastIndexOf(':'));
              postmanTestsToV1AssetMap[postmanTestId] = momentLessId;
              console.log('Created new V1 Test asset:');
              console.log(res.data);
              return FS.write(configFileName, JSON.stringify(postmanTestsToV1AssetMap))
            })
            .then(function() {
              console.log('Updated ' + configFileName + ' with new mapping.');
            })
            .catch(function(error) {
              console.error("Error in creating V1 Test asset after Postman test run:");
              console.error(error);
            });
        }
      });

    });

    Newman.execute(collectionJson, newmanOptions);
  })
  .catch(function(err) {
    console.error(err);
  });
